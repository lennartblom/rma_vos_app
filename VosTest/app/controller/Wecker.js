/*
 * File: app/controller/Wecker.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('VosNavigator.controller.Wecker', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            weckerBackButton: 'button#weckerBackButton',
            MainView: 'container#MainView',
            weckerView: 'container#mycontainer1',
            weckRadius: 'sliderfield#weckRadius',
            sliderValueLabel: 'label#sliderValueLabel',
            weckerOnOffSwitch: 'togglefield#weckerOnOffSwitch',
            selectTune: 'selectfield#selectTune',
            shortestPath: 'checkboxfield#shortestPath',
            mehrfachKlingelnOnOffSwitch: 'togglefield#mehrfachKlingelnOnOffSwitch'
        },

        control: {
            "button#weckerBackButton": {
                tap: 'weckerBackButton'
            },
            "sliderfield#weckRadius": {
                change: 'setWeckRadius',
                drag: 'onSliderfieldDrag'
            },
            "togglefield": {
                change: 'onTogglefieldChange'
            },
            "selectfield": {
                change: 'onSelectfieldChange'
            }
        }
    },

    weckerBackButton: function(button, e, eOpts) {
        this.getWeckerView().hide();
        this.getMainView().show();
    },

    setWeckRadius: function(me, sl, thumb, newValue, oldValue, eOpts) {
        Ext.getCmp('sliderValueLabel').setHtml(newValue+" vor dem Zielpunkt");
        this.sliderValue = newValue;
    },

    onSliderfieldDrag: function(sliderfield, sl, thumb, e, eOpts) {
        var slider = sliderfield.getComponent();
        var label = Ext.getCmp('sliderValueLabel');
        label.setHtml(slider.getValue()+"m vor dem Zielpunkt");
        this.sliderValue = slider.getValue();
    },

    onTogglefieldChange: function(togglefield, newValue, oldValue, eOpts) {
        this.weckerIsOn=newValue;
        console.log("Toggle Field value: "+newValue);
        this.getGeo(newValue);

    },

    onSelectfieldChange: function(selectfield, newValue, oldValue, eOpts) {
        this.tune = newValue;
    },

    init: function(application) {
        this.sliderValue = 200;
        this.weckerIsOn = false;
        this.shortestPath = true;
        this.weckerKlingeltMehrfach=false;
        this.tune = "superMario.mp3";
        this.geo = null;
        this.lat = 0.0;
        this.lng = 0.0;
        this.trackingId = 0;
        this.activeInterval=0;
        this.bgGeo = null;
    },

    wecken: function() {
        navigator.vibrate(1);
        var resource = "resources/tones/" + this.tune;
        navigator.vibrate(1);
        var myMedia = new Media(resource);
        navigator.vibrate(1);
        myMedia.play();
        navigator.vibrate(1);
        navigator.notification.alert("Sie haben den Ziel Ort erreicht, oder befinden sich in unmitelbarer NÃ¤he",function(){myMedia.stop();},"Zielort Erreicht!");
        navigator.vibrate(1);
    },

    getGeo: function(isTracking) {
        var pace = this.getApplication().getController('Settings').sliderPace;

        if(isTracking){
            this.setupBackgroundGeo();
            console.log("device is tracking");
            this.setupGeoTimer(pace*1000);
            bgGeo.start();

        }else{
            clearInterval(this.activeInterval);
            bgGeo.stop();
            console.log("pace disabled");
        }
    },

    setupGeoTimer: function(interval) {
        this.activeInterval = setInterval(this.saveGeo,interval);
    },

    saveGeo: function() {
        console.log("saveGeo wurde aufgerufen.");
        var geoObject = navigator.geolocation.getCurrentPosition(
                geoCallback(position),
            geoError, {enableHighAccuracy:true});
        console.log(geoObject);
    },

    setupBackgroundGeo: function() {

                // Your app must execute AT LEAST ONE call for the current position via standard Cordova geolocation,
                //  in order to prompt the user for Location permission.
                window.navigator.geolocation.getCurrentPosition(function(location) {
                    console.log('Location from Phonegap');
                });

                this.bgGeo = window.plugins.backgroundGeoLocation;

                /**
                * This would be your own callback for Ajax-requests after POSTing background geolocation to your server.
                */
                var yourAjaxCallback = function(response) {
                    ////
                    // IMPORTANT:  You must execute the #finish method here to inform the native plugin that you're finished,
                    //  and the background-task may be completed.  You must do this regardless if your HTTP request is successful or not.
                    // IF YOU DON'T, ios will CRASH YOUR APP for spending too much time in the background.
                    //
                    //
                    bgGeo.finish();
                };

                /**
                * This callback will be executed every time a geolocation is recorded in the background.
                */
                var callbackFn = function(location) {
                    console.log('[js] BackgroundGeoLocation callback:  ' + location.latitudue + ',' + location.longitude);
                    // Do your HTTP request here to POST location to your server.
                    //
                    //
                    yourAjaxCallback.call(this);
                };

                var failureFn = function(error) {
                    console.log('BackgroundGeoLocation error');
                };

                // BackgroundGeoLocation is highly configurable.
                this.bgGeo.configure(callbackFn, failureFn, {
                    url: 'http://only.for.android.com/update_location.json', // <-- only required for Android; ios allows javascript callbacks for your http
                    params: {                                               // HTTP POST params sent to your server when persisting locations.
                        auth_token: 'user_secret_auth_token',
                        foo: 'bar'
                    },
                    headers: {
                        'X-Foo': 'bar'
                    },
                    desiredAccuracy: 10,
                    stationaryRadius: 20,
                    distanceFilter: 30,
                    notificationTitle: 'Background tracking',   // <-- android only, customize the title of the notification
                    notificationText: 'ENABLED',                // <-- android only, customize the text of the notification
                    activityType: "AutomotiveNavigation",       // <-- iOS-only
                    debug: true     // <-- enable this hear sounds for background-geolocation life-cycle.
                });

                // Turn ON the background-geolocation system.  The user will be tracked whenever they suspend the app.
                this.bgGeo.start();

                // If you wish to turn OFF background-tracking, call the #stop method.
                // bgGeo.stop()

    },

    geoCallback: function(position) {
        console.log(position.coords.latitude);
        console.log(position.coords.longitude);
        this.lat=position.coords.latitude;
        this.lng=position.coords.longitude;
    },

    geoError: function() {
        console.log("error while paceing");
    }

});