/*
 * File: app/controller/Fahrplaner.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('VosNavigator.controller.Fahrplaner', {
    extend: 'Ext.app.Controller',

    config: {
        startOrt: {
            lat: 0.0,
            lng: 0.0
        },
        zielOrt: {
            lat: 0.0,
            lng: 0.0
        },
        db: null,
        directionList: 0,
        linesList: 0,
        neumarkt: null,
        tempCoords: {
            lat: 0.0,
            lng: 0.0
        },

        refs: {
            MainView: '#MainView',
            fahrplanerBackButton: '#fahrplanerBackButton',
            FahrplanerView: '#FahrplanerView',
            mybutton: 'button#mybutton',
            lineOne: 'dataview#lineOne',
            lineTwo: 'dataview#lineTwo',
            searchView: '#searchView',
            SearchTitle: 'label#SearchTitle',
            mybutton4: 'button#mybutton4',
            searchfieldStart: 'searchfield#searchfieldStart',
            searchfieldDestination: 'searchfield#searchfieldDestination'
        },

        control: {
            "button#fahrplanerBackButton": {
                tap: 'fahrplanerBackButton'
            },
            "button#mybutton": {
                tap: 'storeTest'
            },
            "#lineOne": {
                itemtap: 'onLineOneItemTap'
            },
            "searchfield#searchfieldStart": {
                focus: 'onFocusSearchfieldStart'
            },
            "searchfield#searchfieldDestination": {
                focus: 'onFocusSearchfieldDestination'
            },
            "button#mybutton4": {
                tap: 'sucheVerbindung'
            }
        }
    },

    fahrplanerBackButton: function(button, e, eOpts) {
        this.getFahrplanerView().hide();
        this.getMainView().show();
    },

    storeTest: function(button, e, eOpts) {
        this.stops.filter("id", 250);
    },

    onLineOneItemTap: function(list, index, item, record) {


        /*var dataView = this.getLineTwo();
        var linesData = record.get('lines');
        //var quantity = linesArray.getCount();



        var myPanel = Ext.create('Ext.Panel', {
            html: "<div class=\"buslineWrapper\"><div class=\"buslinesBoxLeft\"><div class=\"busIcon\" stlye=\"background-image:url(resources/images/icons/bus-icon-150x150.png)\"></div> " + this.getLines(linesData) + "</div><div class=\"buslinesBoxRight\">"+ record.get('name')+ "</div><div class=\"clearing\"></div></div>"
        });

        dataView.removeAll();
        dataView.add([myPanel]);*/
    },

    onFocusSearchfieldStart: function(textfield, e, eOpts) {

        //var searchTitle = Ext.getCmp('SearchTitle');
        //searchTitle.setData({title:"Start"}); // Übergabe an das Label searchTitle
        //console.log('Search Typ übergabe ::before');
        this.getApplication().getController('searchViewController').searchType = 'start';
        //console.log('Search Typ übergabe ::after');
        this.getSearchView().show({type:"slide",direction:"up"});
        this.getFahrplanerView().hide();
    },

    onFocusSearchfieldDestination: function(textfield, e, eOpts) {
        //var searchTitle = Ext.getCmp('SearchTitle');
        //searchTitle.setData({title:"Ziel"});  // Übergabe an das Label searchTitle
        //console.log('Search Typ übergabe ::before');
        this.getApplication().getController('searchViewController').searchType = 'destination';
        //console.log('Search Typ übergabe ::after');
        this.getSearchView().show({type:"slide",direction:"up"});
        this.getFahrplanerView().hide();

    },

    sucheVerbindung: function(button, e, eOpts) {
        var searchView = this.getApplication().getController('searchViewController');
        var sOrt = searchView.getStartOrt();
        var zOrt = searchView.getZielOrt();
        var self = this;
        console.log("verbindung von "+sOrt+" nach "+zOrt);





        dataBaseAction(sOrt,zOrt);

        /**
        *
        *function
        *
        **/
        function dataBaseAction(sOrt, zOrt){
            var coords;
            var start = self.getStartOrt();
            var ziel =  self.getZielOrt();
            var temp = self.getTempCoords();
            var db = self.getDb();
            var lines = [];
            var direction1 = [];
            var direction2 = [];
            var endstation1 = [];
            var endstation2 = [];
            var i=0;
            var j=0;
            var length=0;
            var verbindungUberNeumarkt = false;
            db.transaction(function(tx) {
                //get coords from Startort Name
                tx.executeSql("select lat, long as lng from stops where name = '"+sOrt+"';", [],
                              function(tx, res) {
                                  if(res.rows.length){
                                      start.lat=res.rows.item(0).lat;
                                      start.lng=res.rows.item(0).lng;
                                  }else{
                                      console.log("aktuelle Pos einbeziehen");

                                  }

                              });
                //get coords from ZielOrt Name
                tx.executeSql("select lat, long as lng from stops where name = '"+zOrt+"';", [],
                              function(tx, res) {
                                  if(res.rows.length){
                                      ziel.lat=res.rows.item(0).lat;
                                      ziel.lng=res.rows.item(0).lng;
                                  }

                              });
                //get Lines from Start to Destiantion
                tx.executeSql("Select lineId From stops, connections, lines Where stops.id = connections.stopId and connections.lineId=lines.id and stops.name = '"+sOrt+"' intersect Select lineId From stops, connections, lines Where stops.id = connections.stopId and connections.lineId = lines.id and stops.name = '"+zOrt+"' order by lineId;", [], function(tx, res)
                              {
                                  length = res.rows.length;
                                  j=0;

                                  if(length===0){
                                      console.log("verbindung über neumarkt");
                                      verbindungUberNeumarkt =true;

                                  }else{
                                      for(i =0; i<length;i++){
                                          lines[j++] = res.rows.item(i).lineId;
                                      }
                                      verbindungUberNeumarkt = false;
                                  }
                              },function(){console.log("errror mit Lines");});
                tx.executeSql("Select direction1 as direction, lineId From stops, connections, lines Where stops.id = connections.stopId and connections.lineId=lines.id and stops.name = '"+sOrt+"' intersect Select direction1 as direction, lineId From stops, connections, lines Where stops.id = connections.stopId and connections.lineId = lines.id and stops.name = '"+zOrt+"' order by lineId;", [], function(tx, res)
                              {
                                  length = res.rows.length;
                                  j=0;

                                  for( i =0; i<length;i++){
                                      direction1[j++] = res.rows.item(i).direction;
                                  }


                              },function(){console.log("errror mit dir1");});
                tx.executeSql("Select direction2 as direction, lineId From stops, connections, lines Where stops.id = connections.stopId and connections.lineId=lines.id and stops.name = '"+sOrt+"' intersect Select direction2 as direction, lineId From stops, connections, lines Where stops.id = connections.stopId and connections.lineId = lines.id and stops.name = '"+zOrt+"' order by lineId;", [], function(tx, res)
                              {
                                  length = res.rows.length;
                                  j=0;

                                  for( i =0; i<length;i++){
                                      direction2[j++] = res.rows.item(i).direction;
                                  }


                              },function(){console.log("errror mit dir2");});
                tx.executeSql("select name, lat, long as lng, lineId, endstation1 From stops, connections, lines Where stops.id = connections.stopId and connections.lineId=lines.id and stops.id in (Select endstation1 From stops, connections, lines Where stops.id = connections.stopId and connections.lineId=lines.id and stops.name = '"+sOrt+"' intersect Select endstation1 From stops, connections, lines Where stops.id = connections.stopId and connections.lineId=lines.id and stops.name = '"+zOrt+"') and lineId in (Select lineId From stops, connections, lines Where stops.id = connections.stopId and connections.lineId=lines.id and stops.name = '"+sOrt+"' intersect Select lineId From stops, connections, lines Where stops.id = connections.stopId and connections.lineId=lines.id and stops.name = '"+zOrt+"' order by lineId) order by lineId;", [], function(tx, res)
                              {
                                  length = res.rows.length;
                                  j=0;
                                  for( i =0; i<length;i++){
                                      var innerArray =[];

                                      innerArray[0] = res.rows.item(i).name;
                                      innerArray[1] = res.rows.item(i).lat;
                                      innerArray[2] = res.rows.item(i).lng;
                                      innerArray[3] = res.rows.item(i).lineId;
                                      endstation1[j++] = innerArray;

                                      console.log("Monsterabfrage: "+endstation1[j-1][0]+" "+endstation1[j-1][1]+" "+endstation1[j-1][2]+" "+endstation1[j-1][3]);
                                  }

                              },function(){console.log("errror mit monsterabfraage");});
                /*tx.executeSql("select lat, long as lng from stops where id in(Select endstation2 as endstation From stops, connections, lines Where stops.id = connections.stopId and connections.lineId=lines.id and stops.name = '"+sOrt+"' intersect Select endstation2 as endstation From stops, connections, lines Where stops.id = connections.stopId and connections.lineId = lines.id and stops.name = '"+zOrt+"');", [], function(tx, res)
                              {
                                  length = res.rows.length;
                                  j=0;

                                  for( i =0; i<length;i++){
                                      endstation2[j][0] = res.rows.item(i).lat;
                                      endstation2[j][1] = res.rows.item(i).lng;
                                      j++;
                                  }

                              });*/


            }, function(e) {
                console.log("ERROR: " + e.message);
            },function(){
                var entfernung1;
                var entfernung2;
                var tmpDirection= [];
                console.log("transaction Succesfull"+" start.lat "+start.lat+" ziel.lat "+ziel.lat+" Lines [0] "+lines[0]+" direction1[0] "+
                            direction1[0]+" direction2[0] "+direction2[0]+" Endstation1[0] "+endstation1[0][0]);
                for(var i =0;i<lines.length;i++){
                    entfernung1 = self.entfernung(start,{lat:endstation1[i][1],lng:endstation1[i][2]});
                    entfernung2 = self.entfernung(ziel,{lat:endstation1[i][1],lng:endstation1[i][2]});
                    if(entfernung1>entfernung2){
                        tmpDirection[i]=direction1[i];
                    }else{
                        tmpDirection[i]=direction2[i];
                    }
                    console.log("lineId "+lines[i]+" tmpDirection "+tmpDirection[i]);
                }
            }
                          );
        }






    },

    getLines: function(data) {
        /*var len = data.length;
        var content = '';
        content += '<div class="busline">';

        for(var i=0;i<len;i++){
            content += '<a href="#">';
            content += data[i]['LineId'];
            content += '</a>';

        }

        content += '</div>';

        return content;*/
    },

    launch: function() {

        Ext.getStore('stops').load();
        console.log("Store Stops wurde geladen.");
        this.dbcopy();




        var db = window.sqlitePlugin.openDatabase("vosnavigator.db");
        this.setDb(db);


        console.log("launcher Fahrplaner");
    },

    dbcopy: function() {
           window.plugins.sqlDB.remove("vosnavigator.db",function(){
                console.log("db wurde erfolgreich entfernt");},
                function(e){
                    console.log("Error Code = "+JSON.stringify(e));
                });

            window.plugins.sqlDB.copy("vosnavigator.db",function(){
                console.log("db wurde erfolgreich kopiert");},
                function(e){
                 //db already exists or problem in copying the db file. Check the Log.
                console.log("Error Code = "+JSON.stringify(e));
                //e.code = 516 => if db exists
                });

    },

    entfernung: function(startOrt, zielOrt) {
        console.log("entfernung wird berechnet");
        console.log("Entfernung "+startOrt.lat+" zielOrt "+zielOrt.lat);
        var distance = 0.0;
        var deltaX = 71.5 * (startOrt.lng-zielOrt.lng);
        var deltaY = 111.3 * (startOrt.lat-zielOrt.lat);
        if(deltaX!==0||deltaY!==0){
        distance = Math.sqrt(deltaX*deltaX+deltaY*deltaY)*1000;
        }
        return distance;
    },

    showLines: function(sOrt, zOrt, lines) {
        var db = this.getDb();

        db.transaction(function(tx) {
            tx.executeSql("Select lineId From stops, connections, lines Where stops.id = connections.stopId and connections.lineId=lines.id and stops.name = '"+sOrt+"' intersect Select lineId From stops, connections, lines Where stops.id = connections.stopId and connections.lineId = lines.id and stops.name = '"+zOrt+"';", [], function(tx, res)
                          {
                              var length = res.rows.length;
                              var j=0;

                              if(length===0){
                                  console.log("verbindung über neumarkt");
                              }else{
                                  for(var i =0; i<length;i++){
                                      lines[j++] = res.rows.item(i).lineId;
                                      console.log("linie "+lines[j-1]);

                                  }
                              }
                          });

        }, function(e) {
            console.log("ERROR: " + e.message);
        });


    },

    showDirection: function(nummer, sOrt, zOrt, direction) {
        var db = this.getDb();

        db.transaction(function(tx) {
            tx.executeSql("Select direction"+nummer+" as direction From stops, connections, lines Where stops.id = connections.stopId and connections.lineId=lines.id and stops.name = '"+sOrt+"' intersect Select direction"+nummer+" as direction From stops, connections, lines Where stops.id = connections.stopId and connections.lineId = lines.id and stops.name = '"+zOrt+"';", [], function(tx, res)
                          {
                              var length = res.rows.length;
                              var j=0;

                              for(var i =0; i<length;i++){
                                  direction[j++] = res.rows.item(i).direction;
                                  console.log("direction "+direction[j-1]);
                              }


                          });

        }, function(e) {
            console.log("ERROR: " + e.message);
        });

    },

    getEndstationen: function(nummer, sOrt, zOrt, stationen) {
        var db = this.getDb();
        var feld = [];
        db.transaction(function(tx) {
           tx.executeSql("Select endstation"+nummer+" as endstation From stops, connections, lines Where stops.id = connections.stopId and connections.lineId=lines.id and stops.name = '"+sOrt+"' intersect Select endstation"+nummer+" as endstation From stops, connections, lines Where stops.id = connections.stopId and connections.lineId = lines.id and stops.name = '"+zOrt+"';", [], function(tx, res)
           {
                var length = res.rows.length;
                var j=0;

                for(var i =0; i<length;i++){
                    feld[j++] = res.rows.item(i).endstation;
                    //console.log("Endstation "+feld[j-1]);
                }

           });

            }, function(e) {
              console.log("ERROR: " + e.message);
            });
        for(var i =0;i<feld.length;i++){
            stationen[i]=feld[i];
        }

    },

    getCoords: function(ort, string) {
        var db = this.getDb();
        var self = this;
        var coords;
        if(string==='start'){
            coords = self.getStartOrt();
        }else if(string==='ziel'){
            coords = self.getZielOrt();
        }else{
            coords = self.getTempCoords();
        }

        dataBaseAction(ort, string);

        /**
        *
        *function
        *
        **/
        function dataBaseAction(ort, string){
            db.transaction(function(tx) {

                tx.executeSql("select lat, long as lng from stops where name = '"+ort+"';", [],
                              function(tx, res) {
                                  if(res.rows.length){
                                      store(res.rows.item(0).lat, res.rows.item(0).lng, string);
                                  }

                              });
            }, function(e) {
                console.log("ERROR: " + e.message);
            },function(){console.log("transaction Succesfull"+coords.lat);});
        }
        function store(lat, lng, string){
            console.log("ich werde aufgerufen");
            coords.lat =lat;
            coords.lng =lng;


        }

    },

    stopIdToName: function(id) {
        var db = this.getDb();
        var name;
        db.transaction(function(tx) {
           tx.executeSql("Select name from stops where id="+id+";", [], function(tx, res)
           {
                name = res.rows.item(0).name;
           });

            }, function(e) {
              console.log("ERROR: " + e.message);
            });
        return name;
    }

});