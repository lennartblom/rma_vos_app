{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "aktuellePosition": [
            "{lat:0.0,lng:0.0}"
        ],
        "designer|userClassName": "Wecker",
        "mixins": null,
        "shortestPath": true,
        "sliderValue": 200,
        "taskEngine": [
            "{taskGetPos:null,",
            "taskCheckDistance:null,",
            "taskBackgroundGeo:null,",
            "taskCheckVisited:null}"
        ],
        "trackingId": [
            "null"
        ],
        "tune": "resources/tones/superMario.mp3",
        "weckerIsOn": false,
        "weckerKlingelt": false,
        "weckerKlingeltMehrfach": false
    },
    "name": "MyController",
    "configAlternates": {
        "weckerIsOn": "boolean",
        "sliderValue": "number",
        "aktuellePosition": "object",
        "trackingId": "object",
        "taskEngine": "object",
        "task": "object"
    },
    "designerId": "a983e413-1f50-4b47-b18a-b92e8e18eab4",
    "customConfigs": [
        {
            "group": "(Custom Properties)",
            "name": "weckerIsOn",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "sliderValue",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "shortestPath",
            "type": "boolean"
        },
        {
            "group": "(Custom Properties)",
            "name": "weckerKlingeltMehrfach",
            "type": "boolean"
        },
        {
            "group": "(Custom Properties)",
            "name": "tune",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "aktuellePosition",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "weckerKlingelt",
            "type": "boolean"
        },
        {
            "group": "(Custom Properties)",
            "name": "trackingId",
            "type": "number"
        },
        {
            "group": "(Custom Properties)",
            "name": "taskEngine",
            "type": "string"
        }
    ],
    "cn": [
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "weckerBackButton",
                "selector": "button#weckerBackButton"
            },
            "name": "weckerBackButton",
            "designerId": "160ca1b9-dcd2-4e5f-baad-a6569ec71964"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#weckerBackButton",
                "designer|targetType": "Ext.Button",
                "fn": "weckerBackButtonTap",
                "implHandler": [
                    "this.getWeckerView().hide();",
                    "this.getMainView().show();"
                ],
                "name": "tap"
            },
            "name": "weckerBackButtonTap",
            "designerId": "9a0b9858-cd1a-4565-9f61-4ad7e00e2775"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "MainView",
                "selector": "container#MainView"
            },
            "name": "MainView",
            "designerId": "fdbfff51-3f59-43b0-a921-e95859660158"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "weckerView",
                "selector": "container#mycontainer1"
            },
            "name": "weckerView",
            "designerId": "3a280f06-082a-4e53-ba7d-7267ac91a42b"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "weckRadius",
                "selector": "sliderfield#weckRadius"
            },
            "name": "weckRadius",
            "designerId": "a3dad416-3c41-437a-9912-2a191985d5b7"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "sliderValueLabel",
                "selector": "label#sliderValueLabel"
            },
            "name": "sliderValueLabel",
            "designerId": "0dd17fb4-f434-4a24-a302-04ce6fbc0419"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "sliderfield#weckRadius",
                "designer|targetType": "Ext.field.Slider",
                "fn": "onWeckRadiusChange",
                "implHandler": [
                    "Ext.getCmp('sliderValueLabel').setHtml(newValue+\" vor dem Zielpunkt\");",
                    "this.setSliderValue(newValue);"
                ],
                "name": "change"
            },
            "name": "onWeckRadiusChange",
            "designerId": "e74452d1-adb6-4c40-91f1-12266b233aa4"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "sliderfield#weckRadius",
                "designer|targetType": "Ext.field.Slider",
                "fn": "onWeckRadiusDrag",
                "implHandler": [
                    "var slider = this.getWeckRadius();",
                    "var label = this.getSliderValueLabel();",
                    "label.setHtml(slider.getValue()+\"m vor dem Zielpunkt\");",
                    "this.setSliderValue(slider.getValue());"
                ],
                "name": "drag"
            },
            "name": "onWeckRadiusDrag",
            "designerId": "06b3bd79-2abd-43d7-a29e-c4bfe792174b"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "weckerOnOffSwitch",
                "selector": "togglefield#weckerOnOffSwitch"
            },
            "name": "weckerOnOffSwitch",
            "designerId": "83f12b91-1c87-4558-ab22-dec83cb30791"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "selectTune",
                "selector": "selectfield#selectTune"
            },
            "name": "selectTune",
            "designerId": "20a5c0c2-5b93-4cae-8df3-5b473ac54b4b"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "shortestPath",
                "selector": "checkboxfield#shortestPath"
            },
            "name": "shortestPath",
            "designerId": "e10aacb2-ce32-4a46-a1aa-876d0b18d6b5"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "mehrfachKlingelnOnOffSwitch",
                "selector": "togglefield#mehrfachKlingelnOnOffSwitch"
            },
            "name": "mehrfachKlingelnOnOffSwitch",
            "designerId": "f51d98ae-c6b6-442f-a8d3-97c1e8d5b9c0"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "togglefield#weckerOnOffSwitch",
                "designer|targetType": "Ext.field.Toggle",
                "fn": "onWeckerOnOffChange",
                "implHandler": [
                    "this.setWeckerIsOn(newValue);",
                    "console.log(\"Toggle Field value: \"+newValue);",
                    "this.initiateTracking(newValue);",
                    ""
                ],
                "name": "change"
            },
            "name": "onWeckerOnOffChange",
            "designerId": "b78c47aa-e429-403c-bd38-d6a662e7648c"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "selectfield#selectTune",
                "designer|targetType": "Ext.field.Select",
                "fn": "onTuneChange",
                "implHandler": [
                    "this.setTune(\"resources/tones/\"+newValue);"
                ],
                "name": "change"
            },
            "name": "onTuneChange",
            "designerId": "fc26925e-ad75-4530-985d-996fa028860c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "wecken",
                "implHandler": [
                    "var self = this;",
                    "var taskCheckDistance = this.getTaskEngine().taskCheckDistance;",
                    "navigator.vibrate(1);",
                    "if(!this.getWeckerKlingelt()){",
                    "    var weckTune = new Media(this.getTune());",
                    "    weckTune.play();",
                    "    navigator.vibrate(1);",
                    "    navigator.notification.alert(\"Sie haben den Ziel Ort erreicht, oder befinden sich in unmitelbarer Nähe\",",
                    "                                 function(){",
                    "                                            weckTune.stop();",
                    "                                            clearInterval(taskCheckDistance);",
                    "                                            self.setWeckerKlingelt(false);",
                    "",
                    "    },\"Zielort Erreicht!\");",
                    "    this.setWeckerKlingelt(true);",
                    "}else{",
                    "    navigator.vibrate(1);",
                    "}",
                    ""
                ]
            },
            "name": "wecken",
            "designerId": "80917b31-04d4-497e-9e12-2f5163310ecb"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "isTracking"
                ],
                "fn": "initiateTracking",
                "implHandler": [
                    "console.log(\"initiateTracking wurde aufgerufen\");",
                    "var pace = this.getApplication().getController('Settings').getSliderPace()*1000;",
                    "if(isTracking){",
                    "    this.initiateTaskManager(pace);",
                    "    console.log(\"device is tracking\");",
                    "}else{",
                    "    this.stopTaskManager();",
                    "    console.log(\"pace disabled\");",
                    "",
                    "}"
                ]
            },
            "name": "initiateTracking",
            "designerId": "d88c41a1-f8e9-4ad9-ac6e-cc82ce8bb391"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "interval"
                ],
                "fn": "resetGeoTimer",
                "implHandler": [
                    "if(this.getWeckerIsOn()){",
                    "    var taskEngine = this.getTaskEngine();",
                    "    clearInterval(taskEngine.taskGetPos);",
                    "    taskEngine.taskGetPos = setInterval(Ext.bind(this.activateTracker,this),interval);",
                    "    console.log(\"resetGeoTimer wurde aufgerufen\");",
                    "}"
                ]
            },
            "name": "resetGeoTimer",
            "designerId": "b51606a9-f243-415a-997c-a233c5cbc4a8"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "checkHaltestelle",
                "implHandler": [
                    "console.log(\"CheckHaltestelle wurde aufgerufen\");",
                    "var self = this;",
                    "var fp =this.getApplication().getController('Fahrplaner');",
                    "var aktPos = this.getAktuellePosition();",
                    "",
                    "console.log(\"laufe bis hier\");",
                    "dataBaseActionVisited(aktPos);",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "function dataBaseActionVisited(aktPos){",
                    "    console.log(\"ich werde aufgerufen\");",
                    "    var db = fp.getDb();",
                    "    var stop = {id:0,name:'',lat:0.0,lng:0.0,visited:0};",
                    "    var distance;",
                    "    var counter=0;",
                    "    var i=0;",
                    "    var j=0;",
                    "    var length=0;",
                    "    var idFeld=[];",
                    "    ",
                    "    db.transaction(function(tx) {",
                    "        //visited 0 == false :)",
                    "        tx.executeSql(\"select id, name, lat, long as lng, visited from stops where visited = 0;\", [],",
                    "                      function(tx, res) {",
                    "                          length = res.rows.length;",
                    "",
                    "                          for(i=0;i<length;i++){",
                    "                              stop.id=res.rows.item(i).id;",
                    "                              stop.id=res.rows.item(i).name;",
                    "                              stop.id=res.rows.item(i).lat;",
                    "                              stop.id=res.rows.item(i).lng;",
                    "                              stop.id=res.rows.item(i).visited;",
                    "                              console.log(res.rows.item(i).name+\" \"+res.rows.item(i).visited);",
                    "                              distance = fp.entfernung({lat:stop.lat,lng:stop.lng},aktPos);",
                    "                              console.log(distance);",
                    "                              if(distance<=100){",
                    "                                  idFeld[j++]=res.rows.item(i).id;",
                    "                              }",
                    "                          }",
                    "                          length = idFeld.length;",
                    "                          for(i=0;i<length;i++){",
                    "                              console.log(\"updateSql wird aufgerufen\");",
                    "                              tx.executeSql(\"update stops set visited=1 where id = \"+idFeld[i]+\";\", []);",
                    "                          }",
                    "",
                    "                      },function(e){console.log(\"errror bei set Visited \"+e.message);});",
                    "        tx.executeSql(\"select  name, visited from stops where visited = 1;\", [],",
                    "                      function(tx, res) {",
                    "                          length = res.rows.length;",
                    "",
                    "                          for(i=0;i<length;i++){",
                    "                              console.log(res.rows.item(i).name+\" visited == \"+res.rows.item(i).visited);",
                    "                          }",
                    "",
                    "                      },function(e){console.log(\"errror bei check visited \"+e.message);});",
                    "    },function(e){console.log(e.message+\"chekcHaltestellen successerror\");},function(){",
                    "        console.log(\"checkhaltestellen transaction successfull\");",
                    "    });",
                    "}",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            "name": "checkHaltestelle",
            "designerId": "8ffb137c-3878-48d0-831b-e0e1140cc851"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "checkDistance",
                "implHandler": [
                    "var fahrplaner =this.getApplication().getController('Fahrplaner');",
                    "var aktPos = this.getAktuellePosition();",
                    "var destPos = fahrplaner.getZielOrt();",
                    "var distance = fahrplaner.entfernung(aktPos,destPos);",
                    "var radius = this.getSliderValue();",
                    "if(distance<=radius){",
                    "    console.log(\"distance<radius\");",
                    "    this.wecken();",
                    "}"
                ]
            },
            "name": "checkDistance",
            "designerId": "e5e7562d-ec7a-4912-9fea-584be21d8c9a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "activateTracker",
                "implHandler": [
                    "",
                    "console.log(\"activateTracker wurde aufgerufen\");",
                    "     this.trackingId = new Ext.device.Geolocation.getCurrentPosition({",
                    "         allowHighAccuracy:true,",
                    "         success: Ext.bind(function(position){",
                    "                                             var pos = this.getAktuellePosition();",
                    "                                             pos.lat=position.coords.latitude;",
                    "                                             pos.lng=position.coords.longitude;",
                    "                           },this),",
                    "         failure: function(){",
                    "             console.log(\"Fehler beim Tracken\");",
                    "         }",
                    "     });",
                    "console.log(\"Aktuelle Pos wurde erfasst\");",
                    "console.log(\"Aktuelle Position: \"+this.getAktuellePosition().lat+\" \"+this.getAktuellePosition().lng);"
                ]
            },
            "name": "activateTracker",
            "designerId": "e0dae4de-3cb7-4f3f-9b49-171e6c865abc"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "pace"
                ],
                "fn": "initiateTaskManager",
                "implHandler": [
                    "var taskEngine = this.getTaskEngine();",
                    "taskEngine.taskGetPos = setInterval(Ext.bind(this.activateTracker,this),pace);",
                    "taskEngine.taskCheckDistance = setInterval(Ext.bind(this.checkDistance,this),7000);",
                    "taskEngine.taskBackgroundGeo.start();",
                    "taskEngine.taskCheckVisited = setInterval(Ext.bind(this.checkHaltestelle,this),7500);",
                    "console.log(\"taskmanager wurde initialisiert\");"
                ],
                "task": [
                    "null"
                ]
            },
            "name": "initiateTaskManager",
            "configAlternates": {
                "task": "object"
            },
            "designerId": "23f113f7-a0b0-46ee-b8a7-a0ea52019b51",
            "customConfigs": [
                {
                    "group": "(Custom Properties)",
                    "name": "task",
                    "type": "string"
                }
            ]
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "stopTaskManager",
                "implHandler": [
                    "var taskEngine = this.getTaskEngine();",
                    "clearInterval(taskEngine.taskGetPos);",
                    "clearInterval(taskEngine.taskCheckDistance);",
                    "clearInterval(taskEngine.taskCheckVisited);",
                    "taskEngine.taskBackgroundGeo.stop();"
                ]
            },
            "name": "stopTaskManager",
            "designerId": "adcde240-f4eb-4a0e-98d5-8dd19946e1b0"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setupBackgroundGeo",
                "implHandler": [
                    "",
                    "               this.activateTracker();",
                    "               var bgGeo  = window.plugins.backgroundGeoLocation;",
                    "               var taskEngine = this.getTaskEngine();",
                    "                /**",
                    "                * This callback will be executed every time a geolocation is recorded in the background.",
                    "                */",
                    "",
                    "                var failureFn = function(error) {",
                    "                    console.log('BackgroundGeoLocation error');",
                    "                };",
                    "",
                    "",
                    "                // BackgroundGeoLocation is highly configurable.",
                    "                bgGeo.configure(Ext.bind(",
                    "                    function(location) {",
                    "                            var pos=this.getAktuellePosition();",
                    "                            pos.lat=location.latitude;",
                    "                            pos.lng=location.longitude;",
                    "                            console.log(\"background track: \"+pos.lat + \" \"+ pos.lng);",
                    "                            this.checkDistance();",
                    "                            bgGeo.finish();",
                    "                },this), failureFn, {",
                    "                    locationTimeout: 5,",
                    "                    desiredAccuracy: 10,",
                    "                    stationaryRadius: 10,",
                    "                    distanceFilter: 10,",
                    "                    activityType: \"Fitness\",",
                    "                    stopOnTerminate: true,// <-- iOS-only",
                    "                    debug: false     // <-- enable this hear sounds for background-geolocation life-cycle.",
                    "                });",
                    "",
                    "                // Turn ON the background-geolocation system.  The user will be tracked whenever they suspend the app.",
                    "                bgGeo.changePace(true);",
                    "                taskEngine.taskBackgroundGeo = bgGeo;",
                    "                // If you wish to turn OFF background-tracking, call the #stop method.",
                    "                // bgGeo.stop()"
                ]
            },
            "name": "setupBackgroundGeo",
            "designerId": "b0e02898-7448-44ca-a979-a8c56cfe055f"
        },
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "launch",
                "implHandler": [
                    "this.setupBackgroundGeo();"
                ]
            },
            "name": "launch",
            "designerId": "e3031e6f-f921-4750-be1b-ad3d62f32803"
        }
    ]
}