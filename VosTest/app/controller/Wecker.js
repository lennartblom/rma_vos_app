/*
 * File: app/controller/Wecker.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('VosNavigator.controller.Wecker', {
    extend: 'Ext.app.Controller',

    config: {
        weckerIsOn: false,
        sliderValue: 200,
        shortestPath: true,
        weckerKlingeltMehrfach: false,
        tune: 'resources/tones/superMario.mp3',
        aktuellePosition: {
            lat: 0.0,
            lng: 0.0
        },
        weckerKlingelt: false,
        trackingId: null,
        taskEngine: {
            taskGetPos: null,
            taskCheckDistance: null,
            taskBackgroundGeo: null,
            taskCheckVisited: null
        },

        refs: {
            weckerBackButton: 'button#weckerBackButton',
            MainView: 'container#MainView',
            weckerView: 'container#mycontainer1',
            weckRadius: 'sliderfield#weckRadius',
            sliderValueLabel: 'label#sliderValueLabel',
            weckerOnOffSwitch: 'togglefield#weckerOnOffSwitch',
            selectTune: 'selectfield#selectTune',
            shortestPath: 'checkboxfield#shortestPath',
            mehrfachKlingelnOnOffSwitch: 'togglefield#mehrfachKlingelnOnOffSwitch'
        },

        control: {
            "button#weckerBackButton": {
                tap: 'weckerBackButtonTap'
            },
            "sliderfield#weckRadius": {
                change: 'onWeckRadiusChange',
                drag: 'onWeckRadiusDrag'
            },
            "togglefield#weckerOnOffSwitch": {
                change: 'onWeckerOnOffChange'
            },
            "selectfield#selectTune": {
                change: 'onTuneChange'
            }
        }
    },

    weckerBackButtonTap: function(button, e, eOpts) {
        this.getWeckerView().hide();
        this.getMainView().show({type:"slide",direction:"right"});
    },

    onWeckRadiusChange: function(me, sl, thumb, newValue, oldValue, eOpts) {
        Ext.getCmp('sliderValueLabel').setHtml(newValue+" vor dem Zielpunkt");
        this.setSliderValue(newValue);
    },

    onWeckRadiusDrag: function(sliderfield, sl, thumb, e, eOpts) {
        var slider = this.getWeckRadius();
        var label = this.getSliderValueLabel();
        label.setHtml(slider.getValue()+"m vor dem Zielpunkt");
        this.setSliderValue(slider.getValue());
    },

    onWeckerOnOffChange: function(togglefield, newValue, oldValue, eOpts) {
        this.setWeckerIsOn(newValue);
        console.log("Toggle Field value: "+newValue);
        this.initiateTracking(newValue);

    },

    onTuneChange: function(selectfield, newValue, oldValue, eOpts) {
        this.setTune("resources/tones/"+newValue);
    },

    wecken: function() {
        var self = this;
        var taskCheckDistance = this.getTaskEngine().taskCheckDistance;
        navigator.vibrate(1);
        if(!this.getWeckerKlingelt()){
            var weckTune = new Media(this.getTune());
            weckTune.play();
            navigator.vibrate(1);
            navigator.notification.alert("Sie haben den Ziel Ort erreicht, oder befinden sich in unmitelbarer NÃ¤he",
                                         function(){
                                                    weckTune.stop();
                                                    clearInterval(taskCheckDistance);
                                                    self.setWeckerKlingelt(false);

            },"Zielort Erreicht!");
            this.setWeckerKlingelt(true);
        }else{
            navigator.vibrate(1);
        }

    },

    initiateTracking: function(isTracking) {
        console.log("initiateTracking wurde aufgerufen");
        var pace = this.getApplication().getController('Settings').getSliderPace()*1000;
        if(isTracking){
            this.initiateTaskManager(pace);
            console.log("device is tracking");
        }else{
            this.stopTaskManager();
            console.log("pace disabled");

        }
    },

    resetGeoTimer: function(interval) {
        if(this.getWeckerIsOn()){
            var taskEngine = this.getTaskEngine();
            clearInterval(taskEngine.taskGetPos);
            taskEngine.taskGetPos = setInterval(Ext.bind(this.activateTracker,this),interval);
            console.log("resetGeoTimer wurde aufgerufen");
        }
    },

    checkHaltestelle: function() {
        console.log("CheckHaltestelle wurde aufgerufen");
        var self = this;
        var fp =this.getApplication().getController('Fahrplaner');
        var aktPos = this.getAktuellePosition();

        console.log("laufe bis hier");
        dataBaseActionVisited(aktPos);







        function dataBaseActionVisited(aktPos){
            console.log("ich werde aufgerufen");
            var db = fp.getDb();
            var stop = {id:0,name:'',lat:0.0,lng:0.0,visited:0};
            var counter=0;
            var i=0;
            var length=0;
            db.transaction(function(tx) {
                //visited 0 == false :)
                tx.executeSql("select id, name, lat, long as lng, visited from stops where visited = 0;", [],
                              function(tx, res) {
                                  length = res.rows.length;

                                  for(i=0;i<length;i++){
                                      stop.id=res.rows.item(i).id;
                                      stop.id=res.rows.item(i).name;
                                      stop.id=res.rows.item(i).lat;
                                      stop.id=res.rows.item(i).lng;
                                      stop.id=res.rows.item(i).visited;
                                      if(fp.entfernung({lat:stop.lat,lng:stop.lng},aktuellePos)<=100){
                                          tx.executeSql("update stops set visited=1 where id = "+stop.id+";", [],
                                                        function(tx, res){console.log("visited erfolgreich gesetzt");});
                                      }
                                  }

                              },function(e){console.log("errror bei set Visited "+e.message);});
                tx.executeSql("select  name, visited from stops where visited = 1;", [],
                              function(tx, res) {
                                  length = res.rows.length;

                                  for(i=0;i<length;i++){
                                      console.log(res.rows.item(i).name+" visited == "+res.rows.item(i).visited);
                                  }

                              },function(e){console.log("errror bei check visited "+e.message);});
            },function(e){console.log(e.message+"chekcHaltestellen successerror");},function(){
                console.log("checkhaltestellen transaction successfull");
            });
        }




    },

    checkDistance: function() {
        var fahrplaner =this.getApplication().getController('Fahrplaner');
        var aktPos = this.getAktuellePosition();
        var destPos = fahrplaner.getZielOrt();
        var distance = fahrplaner.entfernung(aktPos,destPos);
        var radius = this.getSliderValue();
        if(distance<=radius){
            console.log("distance<radius");
            this.wecken();
        }
    },

    activateTracker: function() {

        console.log("activateTracker wurde aufgerufen");
             this.trackingId = new Ext.device.Geolocation.getCurrentPosition({
                 allowHighAccuracy:true,
                 success: Ext.bind(function(position){
                                                     var pos = this.getAktuellePosition();
                                                     pos.lat=position.coords.latitude;
                                                     pos.lng=position.coords.longitude;
                                   },this),
                 failure: function(){
                     console.log("Fehler beim Tracken");
                 }
             });
        console.log("Aktuelle Pos wurde erfasst");
        console.log("Aktuelle Position: "+this.getAktuellePosition().lat+" "+this.getAktuellePosition().lng);
    },

    initiateTaskManager: function(pace) {
        var taskEngine = this.getTaskEngine();
        taskEngine.taskGetPos = setInterval(Ext.bind(this.activateTracker,this),pace);
        taskEngine.taskCheckDistance = setInterval(Ext.bind(this.checkDistance,this),7000);
        taskEngine.taskBackgroundGeo.start();
        taskEngine.taskCheckVisited = setInterval(Ext.bind(this.checkHaltestelle,this),7500);
        console.log("taskmanager wurde initialisiert");
    },

    stopTaskManager: function() {
        var taskEngine = this.getTaskEngine();
        clearInterval(taskEngine.taskGetPos);
        clearInterval(taskEngine.taskCheckDistance);
        clearInterval(taskEngine.taskCheckVisited);
        taskEngine.taskBackgroundGeo.stop();
    },

    setupBackgroundGeo: function() {

                       this.activateTracker();
                       var bgGeo  = window.plugins.backgroundGeoLocation;
                       var taskEngine = this.getTaskEngine();
                        /**
                        * This callback will be executed every time a geolocation is recorded in the background.
                        */

                        var failureFn = function(error) {
                            console.log('BackgroundGeoLocation error');
                        };


                        // BackgroundGeoLocation is highly configurable.
                        bgGeo.configure(Ext.bind(
                            function(location) {
                                    var pos=this.getAktuellePosition();
                                    pos.lat=location.latitude;
                                    pos.lng=location.longitude;
                                    console.log("background track: "+pos.lat + " "+ pos.lng);
                                    this.checkDistance();
                                    bgGeo.finish();
                        },this), failureFn, {
                            locationTimeout: 5,
                            desiredAccuracy: 10,
                            stationaryRadius: 10,
                            distanceFilter: 10,
                            activityType: "Fitness",
                            stopOnTerminate: true,// <-- iOS-only
                            debug: false     // <-- enable this hear sounds for background-geolocation life-cycle.
                        });

                        // Turn ON the background-geolocation system.  The user will be tracked whenever they suspend the app.
                        bgGeo.changePace(true);
                        taskEngine.taskBackgroundGeo = bgGeo;
                        // If you wish to turn OFF background-tracking, call the #stop method.
                        // bgGeo.stop()
    },

    launch: function() {
        this.setupBackgroundGeo();
    }

});