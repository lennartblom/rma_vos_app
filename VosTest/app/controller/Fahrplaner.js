/*
 * File: app/controller/Fahrplaner.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('VosNavigator.controller.Fahrplaner', {
    extend: 'Ext.app.Controller',

    config: {
        startOrt: {
            lat: 0.0,
            lng: 0.0
        },
        zielOrt: {
            lat: 0.0,
            lng: 0.0
        },
        db: null,

        refs: {
            MainView: '#MainView',
            fahrplanerBackButton: '#fahrplanerBackButton',
            FahrplanerView: '#FahrplanerView',
            mybutton: 'button#mybutton',
            lineOne: 'dataview#lineOne',
            lineTwo: 'dataview#lineTwo',
            searchView: '#searchView',
            SearchTitle: 'label#SearchTitle',
            mybutton4: 'button#mybutton4'
        },

        control: {
            "button#fahrplanerBackButton": {
                tap: 'fahrplanerBackButton'
            },
            "button#mybutton": {
                tap: 'storeTest'
            },
            "#lineOne": {
                itemtap: 'onLineOneItemTap'
            },
            "searchfield#searchfieldStart": {
                focus: 'onFocusSearchfieldStart'
            },
            "searchfield#searchfieldDestination": {
                focus: 'onFocusSearchfieldDestination'
            },
            "button#mybutton4": {
                tap: 'sucheVerbindung'
            }
        }
    },

    fahrplanerBackButton: function(button, e, eOpts) {
        this.getFahrplanerView().hide();
        this.getMainView().show();
    },

    storeTest: function(button, e, eOpts) {
        this.stops.filter("id", 250);
    },

    onLineOneItemTap: function(list, index, item, record) {


        /*var dataView = this.getLineTwo();
        var linesData = record.get('lines');
        //var quantity = linesArray.getCount();



        var myPanel = Ext.create('Ext.Panel', {
            html: "<div class=\"buslineWrapper\"><div class=\"buslinesBoxLeft\"><div class=\"busIcon\" stlye=\"background-image:url(resources/images/icons/bus-icon-150x150.png)\"></div> " + this.getLines(linesData) + "</div><div class=\"buslinesBoxRight\">"+ record.get('name')+ "</div><div class=\"clearing\"></div></div>"
        });

        dataView.removeAll();
        dataView.add([myPanel]);*/
    },

    onFocusSearchfieldStart: function(textfield, e, eOpts) {

        //var searchTitle = Ext.getCmp('SearchTitle');
        //searchTitle.setData({title:"Start"}); // Übergabe an das Label searchTitle
        //console.log('Search Typ übergabe ::before');
        this.getApplication().getController('searchViewController').searchType = 'start';
        //console.log('Search Typ übergabe ::after');
        this.getSearchView().show({type:"slide",direction:"up"});
        this.getFahrplanerView().hide();
    },

    onFocusSearchfieldDestination: function(textfield, e, eOpts) {
        //var searchTitle = Ext.getCmp('SearchTitle');
        //searchTitle.setData({title:"Ziel"});  // Übergabe an das Label searchTitle
        //console.log('Search Typ übergabe ::before');
        this.getApplication().getController('searchViewController').searchType = 'destination';
        //console.log('Search Typ übergabe ::after');
        this.getSearchView().show({type:"slide",direction:"up"});
        this.getFahrplanerView().hide();

    },

    sucheVerbindung: function(button, e, eOpts) {
        var searchView = this.getApplication().getController('searchViewController');
        var sOrt = searchView.getStartOrt();
        var zOrt = searchView.getZielOrt();
        var db = this.getDb();
        this.getCoordsStartZiel(sOrt,zOrt);
        var startCoords = this.getStartOrt();
        var zielCoord = this.getZielOrt();
        var stationen = [];
        var direction = [];
        var lines = [];

        this.getEndstationen(1,sOrt,zOrt,stationen);
        this.showDirection(1,sOrt,zOrt,direction);
        this.showLines(sOrt, zOrt,lines);


        console.log("vars initialisiert");
        console.log("LALALLALAA"+stationen.length);
        /*for(var i =0;i<stationen.length;i++){
            //stationen[i]=this.stopIdToName(stationen[i]);
            console.log("log");
        }*/

        /*
        *
        *
        for(var i =0;i<stationen.length;i++){
            if(this.entfernung(startCoords,))
        }
        ***/







        console.log(sOrt);
        console.log(zOrt);




    },

    getLines: function(data) {
        /*var len = data.length;
        var content = '';
        content += '<div class="busline">';

        for(var i=0;i<len;i++){
            content += '<a href="#">';
            content += data[i]['LineId'];
            content += '</a>';

        }

        content += '</div>';

        return content;*/
    },

    launch: function() {

        Ext.getStore('stops').load();
        console.log("Store Stops wurde geladen.");
        this.dbcopy();




        var db = window.sqlitePlugin.openDatabase("vosnavigator.db");
        this.setDb(db);


        console.log("launcher Fahrplaner");
    },

    dbcopy: function() {

            window.plugins.sqlDB.copy("vosnavigator.db",function(){
                console.log("db wurde erfolgreich kopiert");},
                function(e){
                 //db already exists or problem in copying the db file. Check the Log.
                console.log("Error Code = "+JSON.stringify(e));
                //e.code = 516 => if db exists
                });

    },

    entfernung: function(startOrt, zielOrt) {
        var distance = 0.0;
        var deltaX = 71.5 * (startOrt.lng-zielOrt.lng);
        var deltaY = 111.3 * (startOrt.lat-zielOrt.lat);
        var radius = this.getSliderValue();
        if(deltaX!==0||deltaY!==0){
        distance = Math.sqrt(deltaX*deltaX+deltaY*deltaY)*1000;
        }
        return distance;
    },

    getCoordsStartZiel: function(sOrt, zOrt) {
        this.setStartOrt(this.getCoords(sOrt));
        this.setZielOrt(this.getCoords(zOrt));

    },

    showLines: function(sOrt, zOrt, lines) {
        var db = this.getDb();

        db.transaction(function(tx) {
           tx.executeSql("Select lineId From stops, connections, lines Where stops.id = connections.stopId and connections.lineId=lines.id and stops.name = '"+sOrt+"' intersect Select lineId From stops, connections, lines Where stops.id = connections.stopId and connections.lineId = lines.id and stops.name = '"+zOrt+"';", [], function(tx, res)
           {
                var length = res.rows.length;
                var j=0;

                if(length===0){
                    console.log("verbindung über neumarkt");
                }else{
                    for(var i =0; i<length;i++){
                        lines[j++] = res.rows.item(i).lineId;
                        console.log("linie "+lines[j-1]);

                    }
                }
           });

            }, function(e) {
              console.log("ERROR: " + e.message);
            });


    },

    showDirection: function(nummer, sOrt, zOrt, direction) {
        var db = this.getDb();

        db.transaction(function(tx) {
           tx.executeSql("Select direction"+nummer+" as direction From stops, connections, lines Where stops.id = connections.stopId and connections.lineId=lines.id and stops.name = '"+sOrt+"' intersect Select direction"+nummer+" as direction From stops, connections, lines Where stops.id = connections.stopId and connections.lineId = lines.id and stops.name = '"+zOrt+"';", [], function(tx, res)
           {
                var length = res.rows.length;
                var j=0;

               for(var i =0; i<length;i++){
                   direction[j++] = res.rows.item(i).direction;
                   console.log("direction "+direction[j-1]);
               }


           });

            }, function(e) {
              console.log("ERROR: " + e.message);
            });

    },

    getEndstationen: function(nummer, sOrt, zOrt, stationen) {
        var db = this.getDb();

        db.transaction(function(tx, stationen) {
           tx.executeSql("Select endstation"+nummer+" as endstation From stops, connections, lines Where stops.id = connections.stopId and connections.lineId=lines.id and stops.name = '"+sOrt+"' intersect Select endstation"+nummer+" as endstation From stops, connections, lines Where stops.id = connections.stopId and connections.lineId = lines.id and stops.name = '"+zOrt+"';", [], function(tx, res, stationen)
           {
                var length = res.rows.length;
                var j=0;

                for(var i =0; i<length;i++){
                    stationen[j++] = res.rows.item(i).endstation;
                    console.log("Endstation "+stationen[j-1]);
                }

           });

            }, function(e) {
              console.log("ERROR: " + e.message);
            });

    },

    getCoords: function(ort) {
        var db = this.getDb();
        var coords = {lat:0.0,
                      lng:0.0};
        db.transaction(function(tx) {
           tx.executeSql("select lat from stops where name = '"+ort+"';", [], function(tx, res) {
                coords.lat = res.rows.item(0).lat;
                console.log(ort+" "+coords.lat);
           });
           tx.executeSql("select long as lng from stops where name = '"+ort+"';", [], function(tx, res) {
                coords.lng = res.rows.item(0).lng;
                console.log(ort+" "+coords.lng);
           });
           return coords;

            }, function(e) {
              console.log("ERROR: " + e.message);
            });
    },

    stopIdToName: function(id) {
        var db = this.getDb();
        var name;
        db.transaction(function(tx) {
           tx.executeSql("Select name from stops where id="+id+";", [], function(tx, res)
           {
                name = res.rows.item(0).name;
           });

            }, function(e) {
              console.log("ERROR: " + e.message);
            });
        return name;
    }

});